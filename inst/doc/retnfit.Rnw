%\VignetteIndexEntry{retnfit: Replica Exchange Ternary Network Fit}
%\VignetteDepends{retnfit}
%\VignettePackage{retnfit}

\documentclass[12pt]{article}
\usepackage{times}

\newcommand\ttt[1]{\texttt{#1}}

\author{Harry~A.~Stern and Matthew~N.~McCall}

\begin{document}
\title{\ttt{retnfit}: Replica Exchange Ternary Network Fit}
\maketitle

\section*{\ttt{parallelFit} function}

The \ttt{retnfit} package contains a parallel implementation of the replica 
exchange algorithm for fitting ternary network models.  The model is 
the same as that described in reference 1 and implemented in the \ttt{ternarynet} package.

The \ttt{retnfit} package contains a single function,
\ttt{parallelFit}, for fitting a ternary network model to target
data consisting of the steady-state responses given a set of
perturbations, again as described in reference 1.  The function takes the following arguments:
\begin{description}
  \item[\ttt{experiment\_set}]data frame containing five columns: \ttt{i\_exp} (experiment index), \ttt{i\_node} (node index), \ttt{outcome} (-1/0/1), \ttt{value} (cost for that outcome), \ttt{is\_perturbation} (0 or 1)
  \item[\ttt{max\_parents}]maximum number of parents allowed for each node
  \item[\ttt{n\_cycles}]maximum number of Monte Carlo cycles
  \item[\ttt{n\_write}]number of times to write output during the run
  \item[\ttt{T\_lo}]T for lowest-temperature replica
  \item[\ttt{T\_h}]T for highest-temperature replica
  \item[\ttt{target\_score}] run will terminate if this is reached
  \item[\ttt{n\_proc}]number of replicas
  \item[\ttt{logfile}]filename for log file
  \item[\ttt{seed}]seed for random number generator
\end{description}

The return value is a list with an element for each replica.  Each
element is itself a list of the best unnormalized score, normalized
score (unnormalized score divided by product of number of nodes and
number of experiments), list of parents for each node, and array
describing transition rule, giving the outcome of a node for each
configuration of parent node. 

\section*{Example}

\begin{verbatim}

library('retnfit')
results <- parallelFit(read.csv('n8.1.csv'),
                       max_parents=4, 
                       n_cycles=10000,
                       n_write=10,
                       T_lo=0.001,
                       T_hi=1.0,
                       target_score=0,
                       n_proc=12,
                       logfile='a.log',
                       seed=525108)
save(results, file='a.rda')

lowest_temp_results <- results[[1]]

print('Unnormalized score:')
print(lowest_temp_results$unnormalized_score)

print('Normalized score:')
print(lowest_temp_results$normalized_score)

print('Parents:')
print(lowest_temp_results$parents)

print('Outcomes:')
print(lowest_temp_results$outcomes)


results <- parallelFit(read.csv('sampledata.csv'),
                       max_parents=4, 
                       n_cycles=10000,
                       n_write=10,
                       T_lo=0.001,
                       T_hi=1.0,
                       target_score=0,
                       n_proc=12,
                       logfile='a.log',
                       seed=525108)

\end{verbatim}

In this example, the input file (\ttt{sampledata.csv}) is of the form

\begin{verbatim}
i_exp, i_node, outcome, value, is_perturbation
0, 0, -1, 2.0, 0
0, 0, 0, 1.0, 0
0, 0, 1, 0.0, 1
0, 1, -1, 1.0, 0
0, 1, 0, 0.0, 0
0, 1, 1, 1.0, 0
0, 2, -1, 1.0, 0
0, 2, 0, 0.0, 0
0, 2, 1, 1.0, 0
0, 3, -1, 1.0, 0
0, 3, 0, 0.0, 0
0, 3, 1, 1.0, 0
0, 4, -1, 1.0, 0
0, 4, 0, 0.0, 0
0, 4, 1, 1.0, 0
0, 5, -1, 1.0, 0
0, 5, 0, 0.0, 0
0, 5, 1, 1.0, 0
0, 6, -1, 1.0, 0
0, 6, 0, 0.0, 0
0, 6, 1, 1.0, 0
0, 7, -1, 1.0, 0
0, 7, 0, 0.0, 0
0, 7, 1, 1.0, 0
1, 0, -1, 1.0, 0
1, 0, 0, 0.0, 0
1, 0, 1, 1.0, 0
.
.
.
\end{verbatim}

The output will be of the form
\begin{verbatim}

[1] "Exiting Rmpi. Rmpi cannot be used unless relaunching R."
[1] "Unnormalized score:"
[1] 4
[1] "Normalized score:"
[1] 0.0625
[1] "Parents:"
     [,1] [,2] [,3] [,4]
[1,]    1    2    6    7
[2,]    2    3    4    7
[3,]    0    5    6    7
[4,]    1    2    5    7
[5,]    0    1    3    5
[6,]    0    1    3    6
[7,]    2    3    5    7
[8,]    0    2    4    5
[1] "Outcomes:"
, , 1, 1, 1

     [,1] [,2] [,3]
[1,]    0    0   -1
[2,]    0    1    0
[3,]    0    0    0
[4,]    0   -1    0
[5,]   -1    1   -1
[6,]    1    1    1
[7,]    1    1    0
[8,]    1    1    1

, , 2, 1, 1

     [,1] [,2] [,3]
[1,]   -1    0    1
[2,]   -1    1   -1
[3,]    0    0   -1
[4,]    0   -1    1
[5,]    1    0   -1
[6,]   -1    1    1
[7,]    1    1    1
[8,]    1   -1    0
.
.
.
\end{verbatim}


\section*{References}

\begin{enumerate}
\item Almudevar, A., McCall, M.~N., McMurray, H., and Land.~H., 
``Fitting Boolean networks from steady state perturbation data," 
\textit{Statistical Applications in Genetics and Molecular Biology} 
\textbf{10} (2011)
\item Harry~A.~Stern and Matthew~N.~McCall,
``Fitting ternary network models of gene regulatory networks by replica exchange Monte Carlo,''
submitted to \textit{Bioinformatics}
\end{enumerate}

\end{document}
